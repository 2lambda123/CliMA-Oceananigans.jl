env:
  JULIA_VERSION: "1.9.1"
  JULIA_MINOR_VERSION: "1.9"
  SVERDRUP_HOME: "/data5/glwagner"
  TARTARUS_HOME: "/storage5/buildkite-agent"
  GKSwstype: "100" # See: https://github.com/jheinen/GR.jl/issues/278

steps:

#####
##### Setup 
#####

  - label: "gpu setup"
    key: "init_gpu"
    env:
      TEST_GROUP: "none"
    plugins:
      - JuliaCI/julia#v1:
          version: "1.9"
      - JuliaCI/julia-test#v1:
          coverage: false
    agents:
      queue: Oceananigans
      architecture: GPU

  - label: "cpu setup"
    key: "init_cpu"
    env:
      TEST_GROUP: "none"
      CUDA_VISIBLE_DEVICES: "-1"
    plugins:
      - JuliaCI/julia#v1:
          version: "1.9"
      - JuliaCI/julia-test#v1:
          coverage: true
    agents:
      queue: Oceananigans
      architecture: CPU

#####
##### Tests
#####

  - label: "gpu {{matrix.group}}"
    matrix:
      setup:
        group:
          - "unit"
          - "poisson_solvers_1"
          - "poisson_solvers_2"
          - "matrix_poisson_solvers"
          - "general_solvers"
          - "time_stepping_1"
          - "time_stepping_2"
          - "time_stepping_3"
          - "turbulence_closures"
          - "hydrostatic_free_surface"
          - "shallow_water"
          - "simulation"
          - "lagrangian"
          - "abstract_operations"
          - "cubed_sphere"
          - "multi_region"
          - "nonhydrostatic_regression"
          - "hydrostatic_regression"
          - "scripts"
    env:
      TEST_GROUP: "{{matrix.group}}"
    plugins:
      - JuliaCI/julia#v1:
          version: "1.9"
      - JuliaCI/julia-test#v1:
          update_registry: false
          coverage: false
    agents:
      queue: Oceananigans
      architecture: GPU
    depends_on: "init_gpu"
    if: !build.pull_request.draft

  - label: "cpu {{matrix.group}}"
    matrix:
      setup:
        group:
          - "unit"
          - "poisson_solvers_1"
          - "poisson_solvers_2"
          - "matrix_poisson_solvers"
          - "general_solvers"
          - "time_stepping_1"
          - "time_stepping_2"
          - "time_stepping_3"
          - "turbulence_closures"
          - "hydrostatic_free_surface"
          - "shallow_water"
          - "simulation"
          - "lagrangian"
          - "abstract_operations"
          - "cubed_sphere"
          - "multi_region"
          - "nonhydrostatic_regression"
          - "hydrostatic_regression"
          - "scripts"

    env:
      TEST_GROUP: "{{matrix.group}}"
      CUDA_VISIBLE_DEVICES: "-1"
    plugins:
      - JuliaCI/julia#v1:
          version: "1.9"
      - JuliaCI/julia-test#v1:
          update_registry: false
          coverage: false
    agents:
      queue: Oceananigans
      architecture: CPU
    depends_on: "init_cpu"
    if: !build.pull_request.draft

#####
##### Distributed/MPI
#####

  - label: "cpu distributed {{matrix.group}} tests"
    matrix:
      setup:
        group:
          - "distributed"
          - "distributed_solvers"
    env:
      TEST_GROUP: "{{matrix.group}}"
      CUDA_VISIBLE_DEVICES: "-1"
    plugins:
      - JuliaCI/julia#v1:
          version: "1.9"
    command: |
      julia -O0 --color=yes --project -e 'using MPI; MPI.install_mpiexecjl(; destdir=".")'
      ./mpiexecjl -np 4 julia -O0 --color=yes --project -e 'using Pkg; Pkg.test()'
    agents:
      queue: Oceananigans
      architecture: CPU
    depends_on: "init_cpu"
    if: !build.pull_request.draft


  # We get a SegFault. We probably need more devices to run this test
  # - label: "gpu distributed unit tests"
  # env:
  #   JULIA_DEPOT_PATH: "$SVERDRUP_HOME/.julia-$BUILDKITE_BUILD_NUMBER"
  #   TEST_GROUP: "distributed"
  #   CUDA_VISIBLE_DEVICES: "0"
  #   PATH: "$PATH:$SVERDRUP_HOME/julia-$JULIA_VERSION/bin" # Need julia binary in $PATH for mpiexecjl to work.
  #   JULIA_BINDIR: "$SVERDRUP_HOME/julia-$JULIA_VERSION/bin"
  # commands:
  #   - "$SVERDRUP_HOME/.julia-$BUILDKITE_BUILD_NUMBER/bin/mpiexecjl -np 4 $SVERDRUP_HOME/julia-$JULIA_VERSION/bin/julia -O0 --color=yes --project -e 'using Pkg; Pkg.test()'"
  # agents:
  #   queue: Oceananigans
  #   architecture: GPU
  # depends_on: "init_gpu"


#####
##### Documentation
#####

  - label: "ðŸ¦‰ documentation"
    env:
      CUDA_VISIBLE_DEVICES: "-1"
      JULIA_DEBUG: "Documenter"
    plugins:
      - JuliaCI/julia#v1:
          version: "1.9"
    command: |
      - "julia --color=yes --project=docs/ docs/make.jl"
    agents:
      queue: Oceananigans
      architecture: CPU
    depends_on: "init_cpu"
    if: !build.pull_request.draft
