#####
##### Divergence operators
#####

"""
    div·∂ú·∂ú·∂ú(i, j, k, grid, u, v, w)

Calculates the divergence ‚àá¬∑ùêî of a vector field ùêî = (u, v, w),
which ends up at tracer cell centers (ccc).
"""
@inline function div·∂ú·∂ú·∂ú(i, j, k, grid, u, v, w)
    return 1 / V·∂ú·∂ú·∂ú(i, j, k, grid) * (Œ¥x·∂ú·∂ú·∂ú(i, j, k, grid, Ax_q·∂†·∂ú·∂ú, u) +
                                      Œ¥y·∂ú·∂ú·∂ú(i, j, k, grid, Ay_q·∂ú·∂†·∂ú, v) +
                                      Œ¥z·∂ú·∂ú·∂ú(i, j, k, grid, Az_q·∂ú·∂ú·∂†, w))
end

"""
    div_xy·∂ú·∂ú·∂ú(i, j, k, grid, u, v)

Returns the discrete horizontal divergence `div_xy = ‚àÇx u + ‚àÇy v`
of velocity field `u, v`. `div_xy·∂ú·∂ú·∂ú` ends up at the location `ccc`.
"""
@inline function div_xy·∂ú·∂ú·∂ú(i, j, k, grid, u, v)
    return 1 / Az·∂ú·∂ú·∂ú(i, j, k, grid) * (Œ¥x·∂ú·∂ú·∂ú(i, j, k, grid, Œîy_q·∂†·∂ú·∂ú, u) +
                                       Œ¥y·∂ú·∂ú·∂ú(i, j, k, grid, Œîx_q·∂ú·∂†·∂ú, v))
end

#####
##### "Location-less" divergence operator
#####

@inline Base.div(i, j, k, grid::AbstractGrid, loc, q_west, q_east, q_south, q_north, q_bottom, q_top) =
    1 / volume(i, j, k, grid, loc...) * (Œ¥x_Ax_q(i, j, k, grid, loc, q_west, q_east) + 
                                         Œ¥y_Ay_q(i, j, k, grid, loc, q_south, q_north) + 
                                         Œ¥z_Az_q(i, j, k, grid, loc, q_bottom, q_top))
    
@inline function Œ¥x_Ax_q(i, j, k, grid, (LX, LY, LZ), q·µÇ, q·¥±)
    i·µÇ = idx·¥∏(i, LX)
    Ax·µÇ = Ax(i·µÇ, j, k, grid, LX, LY, LZ)

    i·¥± = idx·¥ø(i, LX)
    Ax·¥± = Ax(i·¥±, j, k, grid, LX, LY, LZ)

    return Ax·¥± * q·¥± - Ax·µÇ * q·µÇ
end

@inline function Œ¥y_Ay_q(i, j, k, grid, (LX, LY, LZ), qÀ¢, q·¥∫)
    jÀ¢ = idx·¥∏(j, LY)
    AyÀ¢ = Ay(i, jÀ¢, k, grid, LX, LY, LZ)

    j·¥∫ = idx·¥ø(j, LY)
    Ay·¥∫ = Ay(i, j·¥∫, k, grid, LX, LY, LZ)

    return Ay·¥∫ * q·¥∫ - AyÀ¢ * qÀ¢
end

@inline function Œ¥z_Az_q(i, j, k, grid, (LX, LY, LZ), q·¥Æ, q·µÄ)
    k·¥Æ = idx·¥∏(k, LZ)
    Az·¥Æ = Az(i, j, k·¥Æ, grid, LX, LY, LZ)

    k·µÄ = idx·¥ø(k, LZ)
    Az·µÄ = Az(i, j, k·µÄ, grid, LX, LY, LZ)

    return Az·µÄ * q·µÄ - Az·¥Æ * q·¥Æ
end

# And flat!

@inline Œ¥x_Ax_q(i, j, k, grid::XFlatGrid, args...) = zero(grid)
@inline Œ¥y_Ay_q(i, j, k, grid::YFlatGrid, args...) = zero(grid)
@inline Œ¥z_Az_q(i, j, k, grid::ZFlatGrid, args...) = zero(grid)
