abstract type AbstractDivergenceScheme end


#####
##### Divergence operators
#####

"""
    div·∂ú·∂ú·∂ú(i, j, k, grid, u, v, w)

Calculates the divergence ‚àá¬∑ùêî of a vector field ùêî = (u, v, w),

    1/V * [Œ¥x·∂ú·µÉ·µÉ(Ax * u) + Œ¥x·µÉ·∂ú·µÉ(Ay * v) + Œ¥z·µÉ·µÉ·∂ú(Az * w)],

which will end up at the cell centers `ccc`.
"""
@inline function div·∂ú·∂ú·∂ú(i, j, k, grid, u, v, w)
    return 1/V·∂ú·∂ú·∂ú(i, j, k, grid) * (Œ¥x·∂ú·µÉ·µÉ(i, j, k, grid, Ax_q·∂†·∂ú·∂ú, u) +
                                    Œ¥y·µÉ·∂ú·µÉ(i, j, k, grid, Ay_q·∂ú·∂†·∂ú, v) +
                                    Œ¥z·µÉ·µÉ·∂ú(i, j, k, grid, Az_q·∂ú·∂ú·∂†, w))
end

#####
##### Schemes for calculating horizontal divergence
#####

struct TrivialSecondOrder <: AbstractHorizontalDivergenceScheme end
struct UpwindWENO4 <: AbstractHorizontalDivergenceScheme end
struct CenteredWENO5 <: AbstractHorizontalDivergenceScheme end

@inline _symmetric_interpolate_x·∂†·µÉ·µÉ(i, j, k, grid, ::TrivialSecondOrder, u) = @inbounds u[i, j, k]
@inline _symmetric_interpolate_y·µÉ·∂†·µÉ(i, j, k, grid, ::TrivialSecondOrder, v) = @inbounds v[i, j, k]

"""
    div_xy·∂ú·∂ú·µÉ(i, j, k, grid, u, v)

Returns the discrete `div_xy = ‚àÇx u + ‚àÇy v` of velocity field `u, v` defined as

```
1 / Az·∂ú·∂ú·µÉ * [Œ¥x·∂ú·µÉ·µÉ(Œîy·µÉ·∂ú·µÉ * u) + Œ¥y·µÉ·∂ú·µÉ(Œîx·∂ú·µÉ·µÉ * v)]
```

at `i, j, k`, where `Az·∂ú·∂ú·µÉ` is the area of the cell centered on (Center, Center, Any) --- a tracer cell,
`Œîy` is the length of the cell centered on (Face, Center, Any) in `y` (a `u` cell),
and `Œîx` is the length of the cell centered on (Center, Face, Any) in `x` (a `v` cell).
`div_xy·∂ú·∂ú·µÉ` ends up at the location `cca`.
"""
@inline function div_xy·∂ú·∂ú·∂ú(i, j, k, grid, scheme, u, v)
    uÃÉ  = _symmetric_interpolate_x·∂†·µÉ·µÉ(i, j, k, grid, scheme, u)
    vÃÉ  = _symmetric_interpolate_y·µÉ·∂†·µÉ(i, j, k, grid, scheme, v)

    return 1 / Az·∂ú·∂ú·∂ú(i, j, k, grid) * (Œ¥x·∂ú·µÉ·µÉ(i, j, k, grid, Œîy_q·∂†·∂ú·∂ú, uÃÉ) +
                                       Œ¥y·µÉ·∂ú·µÉ(i, j, k, grid, Œîx_q·∂ú·∂†·∂ú, vÃÉ))
end

# Default
@inline div_xy·∂ú·∂ú·∂ú(i, j, k, grid, u, v) = div_xy·∂ú·∂ú·∂ú(i, j, k, grid, TrivialSecondOrder(), u, v)

