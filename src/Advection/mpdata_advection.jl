using Oceananigans.BoundaryConditions
using Oceananigans.Fields
using Oceananigans.Fields: VelocityFields, location
using KernelAbstractions: @kernel, @index
using Oceananigans.Utils
using Adapt 

struct MPData{FT, I, A, V} <: AbstractUpwindBiasedAdvectionScheme{1, FT} 
    velocities :: A
    previous_velocities :: A
    vertical_advection :: V
    iterations :: I
    MPData{FT}(v::A, pv::A, va::V, i::I) where {FT, A, V, I} = new{FT, I, A, V}(v, pv, va, i)
end

function MPData(grid; iterations = nothing,
                      vertical_advection = nothing)
    velocities = VelocityFields(grid)
    previous_velocities = VelocityFields(grid)
    return MPData{eltype(grid)}(velocities, previous_velocities, vertical_advection, iterations)
end

Adapt.adapt_structure(to, scheme::MPData{FT}) where FT = 
    MPData{FT}(Adapt.adapt(to, scheme.velocities),
               Adapt.adapt(to, scheme.previous_velocities),
               Adapt.adapt(to, scheme.vertical_advection),
               Adapt.adapt(to, scheme.iterations))

# Optimal MPData scheme from "Antidiffusive Velocities for Multipass Donor Cell Advection"
# which has only two passes 
const OptimalMPData = MPData{<:Any, <:Nothing}

# Different scheme in the vertical direction
const PartialMPData = MPData{<:Any, <:Any, <:AbstractAdvectionScheme}

# Basically just first order upwind (also called the "donor cell" scheme)
@inline symmetric_interpolate_x·∂†·µÉ·µÉ(i, j, k, grid, ::MPData, c, args...) = ‚Ñëx·∂†·µÉ·µÉ(i, j, k, grid, c, args...)
@inline symmetric_interpolate_y·µÉ·∂†·µÉ(i, j, k, grid, ::MPData, c, args...) = ‚Ñëy·µÉ·∂†·µÉ(i, j, k, grid, c, args...)
@inline symmetric_interpolate_z·µÉ·µÉ·∂†(i, j, k, grid, ::MPData, c, args...) = ‚Ñëz·µÉ·µÉ·∂†(i, j, k, grid, c, args...)

@inline symmetric_interpolate_x·∂ú·µÉ·µÉ(i, j, k, grid, ::MPData, u, args...) = ‚Ñëx·∂ú·µÉ·µÉ(i, j, k, grid, u, args...)
@inline symmetric_interpolate_y·µÉ·∂ú·µÉ(i, j, k, grid, ::MPData, v, args...) = ‚Ñëy·µÉ·∂ú·µÉ(i, j, k, grid, v, args...)
@inline symmetric_interpolate_z·µÉ·µÉ·∂ú(i, j, k, grid, ::MPData, w, args...) = ‚Ñëz·µÉ·µÉ·∂ú(i, j, k, grid, w, args...)

@inline inner_left_biased_interpolate_x·∂†·µÉ·µÉ(i, j, k, grid, ::MPData, œà, idx, loc, args...) = @inbounds œà[i-1, j, k]
@inline inner_left_biased_interpolate_y·µÉ·∂†·µÉ(i, j, k, grid, ::MPData, œà, idx, loc, args...) = @inbounds œà[i, j-1, k]
@inline inner_left_biased_interpolate_z·µÉ·µÉ·∂†(i, j, k, grid, ::MPData, œà, idx, loc, args...) = @inbounds œà[i, j, k-1]

@inline inner_right_biased_interpolate_x·∂†·µÉ·µÉ(i, j, k, grid, ::MPData, œà, idx, loc, args...) = @inbounds œà[i, j, k]
@inline inner_right_biased_interpolate_y·µÉ·∂†·µÉ(i, j, k, grid, ::MPData, œà, idx, loc, args...) = @inbounds œà[i, j, k]
@inline inner_right_biased_interpolate_z·µÉ·µÉ·∂†(i, j, k, grid, ::MPData, œà, idx, loc, args...) = @inbounds œà[i, j, k]

@inline inner_left_biased_interpolate_x·∂†·µÉ·µÉ(i, j, k, grid, ::MPData, œà::Function, idx, loc, args...) = @inbounds œà(i-1, j, k, grid, args...)
@inline inner_left_biased_interpolate_y·µÉ·∂†·µÉ(i, j, k, grid, ::MPData, œà::Function, idx, loc, args...) = @inbounds œà(i, j-1, k, grid, args...)
@inline inner_left_biased_interpolate_z·µÉ·µÉ·∂†(i, j, k, grid, ::MPData, œà::Function, idx, loc, args...) = @inbounds œà(i, j, k-1, grid, args...)

@inline inner_right_biased_interpolate_x·∂†·µÉ·µÉ(i, j, k, grid, ::MPData, œà::Function, idx, loc, args...) = @inbounds œà(i, j, k, grid, args...)
@inline inner_right_biased_interpolate_y·µÉ·∂†·µÉ(i, j, k, grid, ::MPData, œà::Function, idx, loc, args...) = @inbounds œà(i, j, k, grid, args...)
@inline inner_right_biased_interpolate_z·µÉ·µÉ·∂†(i, j, k, grid, ::MPData, œà::Function, idx, loc, args...) = @inbounds œà(i, j, k, grid, args...)

function correct_advection!(model, Œît)
    grid = model.grid
    velocities = model.velocities
    
    for tracer_name in propertynames(model.tracers)
        @inbounds tracer = model.tracers[tracer_name]
        @inbounds scheme = model.advection[tracer_name]
        correct_mpdata_tracer!(tracer, grid, Œît, velocities, scheme)
    end

    correct_mpdata_momentum!(velocities, grid, Œît, model.advection)

    return nothing
end

correct_mpdata_momentum!(velocities, grid, Œît, scheme) = nothing

function correct_mpdata_momentum!(velocities, grid, Œît, scheme::MPData)
    pseudo_velocities = scheme.velocities
    previous_velocities = scheme.previous_velocities

    set!(pseudo_velocities.u, velocities.u)
    set!(pseudo_velocities.v, velocities.v)
    set!(pseudo_velocities.w, velocities.w)

    set!(previous_velocities.u, velocities.u)
    set!(previous_velocities.v, velocities.v)
    set!(previous_velocities.w, velocities.w)

    mpdata_iterate!(velocities.u, grid, scheme, pseudo_velocities, Œît, div_ùêØu)

    set!(pseudo_velocities.u, previous_velocities.u)
    set!(pseudo_velocities.v, previous_velocities.v)
    set!(pseudo_velocities.w, previous_velocities.w)

    mpdata_iterate!(velocities.v, grid, scheme, pseudo_velocities, Œît, div_ùêØu)

    return nothing
end

correct_mpdata_tracer!(field, grid, Œît, velocities, scheme) = nothing 

function correct_mpdata_tracer!(field, grid, Œît, velocities, scheme::MPData) 
    pseudo_velocities = scheme.velocities

    set!(pseudo_velocities.u, velocities.u)
    set!(pseudo_velocities.v, velocities.v)
    set!(pseudo_velocities.w, velocities.w)

    mpdata_iterate!(field, grid, scheme, pseudo_velocities, Œît, div_Uc)

    return nothing
end

function mpdata_iterate!(field, grid, scheme::OptimalMPData, pseudo_velocities, Œît, divUc)

    fill_halo_regions!(field)
    launch!(architecture(grid), grid, :xyz, _calculate_optimal_mpdata_velocities!, 
            pseudo_velocities, grid, field, Œît)

    fill_halo_regions!(pseudo_velocities)
    launch!(architecture(grid), grid, :xyz, _update_tracer!, field, 
            scheme, pseudo_velocities, grid, divUc, Œît) 

    return nothing
end

function mpdata_iterate!(field, grid, scheme, pseudo_velocities, Œît, divUc)

    for iter in 1:scheme.iterations
        fill_halo_regions!(field)
        launch!(architecture(grid), grid, :xyz, _calculate_mpdata_velocities!, 
                pseudo_velocities, grid, field, Œît)

        fill_halo_regions!(pseudo_velocities)
        launch!(architecture(grid), grid, :xyz, _update_tracer!, field, scheme, 
                pseudo_velocities, grid, divUc, Œît) 
    end

    return nothing
end

""" 
Pseudo-velocities are calculated as:

u·µñ = abs(u)(1 - abs(u)) A - u v B - u w C
v·µñ = abs(v)(1 - abs(v)) B - u v A - v w C
w·µñ = abs(w)(1 - abs(w)) C - u w A - v w B

where A = Œîx / 2œà ‚àÇx(œà)
and   B = Œîy / 2œà ‚àÇy(œà)
and   C = Œîz / 2œà ‚àÇz(œà)
"""
@kernel function _calculate_mpdata_velocities!(velocities, grid, œà, Œît)
    i, j, k = @index(Global, NTuple)

    A·∂†·∂ú·∂ú, B·∂†·∂ú·∂ú, C·∂†·∂ú·∂ú, A·∂ú·∂†·∂ú, B·∂ú·∂†·∂ú, C·∂ú·∂†·∂ú, A·∂ú·∂ú·∂†, B·∂ú·∂ú·∂†, C·∂ú·∂ú·∂† = mpdata_auxiliaries(i, j, k, grid, œà)
    u·µñ, v·µñ, w·µñ = velocities

    Œæ, Œ∑, Œ∂ = mpdata_pseudo_velocities(i, j, k, grid, Œît, velocities, A·∂†·∂ú·∂ú, B·∂†·∂ú·∂ú, C·∂†·∂ú·∂ú, A·∂ú·∂†·∂ú, B·∂ú·∂†·∂ú, C·∂ú·∂†·∂ú, A·∂ú·∂ú·∂†, B·∂ú·∂ú·∂†, C·∂ú·∂ú·∂†)

    @inbounds begin
        u·µñ[i, j, k] = min(abs(u·µñ[i, j, k]), abs(Œæ)) * sign(Œæ)
        v·µñ[i, j, k] = min(abs(v·µñ[i, j, k]), abs(Œ∑)) * sign(Œ∑)
        w·µñ[i, j, k] = min(abs(w·µñ[i, j, k]), abs(Œ∂)) * sign(Œ∂)
    end 
end

""" 
Pseudo-velocities are calculated as:

u·µñ = ‚àë‚ÇÅ‚àû abs(u·¥æ)(1 - abs(u·¥æ)) A - u·¥æ v·¥æ B - u·µñ w·µñ C
v·µñ = ‚àë‚ÇÅ‚àû abs(v·¥æ)(1 - abs(v·¥æ)) B - u·¥æ v·¥æ A - v·µñ w·µñ C
w·µñ = ‚àë‚ÇÅ‚àû abs(w·¥æ)(1 - abs(w·¥æ)) C - u·¥æ w·¥æ A - v·µñ w·µñ B

where A = Œîx / 2œà ‚àÇx(œà) stays fixed
and   B = Œîy / 2œà ‚àÇy(œà) stays fixed
"""
@kernel function _calculate_optimal_mpdata_velocities!(velocities, grid, œà, Œît)
    i, j, k = @index(Global, NTuple)

    u·µñ, v·µñ, w·µñ = velocities
    A·∂†·∂ú·∂ú, B·∂†·∂ú·∂ú, C·∂†·∂ú·∂ú, A·∂ú·∂†·∂ú, B·∂ú·∂†·∂ú, C·∂ú·∂†·∂ú, A·∂ú·∂ú·∂†, B·∂ú·∂ú·∂†, C·∂ú·∂ú·∂† = mpdata_auxiliaries(i, j, k, grid, œà)

    @inbounds begin
        u_abs = abs(u·µñ[i, j, k])
        v_abs = abs(v·µñ[i, j, k])
        
        A‚Çê·∂†·∂ú·∂ú = abs(A·∂†·∂ú·∂ú)
        B‚Çê·∂†·∂ú·∂ú = abs(B·∂†·∂ú·∂ú)
        A‚Çê·∂ú·∂†·∂ú = abs(A·∂ú·∂†·∂ú)
        B‚Çê·∂ú·∂†·∂ú = abs(B·∂ú·∂†·∂ú)

        Œæ, Œ∑, Œ∂ = mpdata_pseudo_velocities(i, j, k, grid, Œît, velocities, A·∂†·∂ú·∂ú, B·∂†·∂ú·∂ú, C·∂†·∂ú·∂ú, A·∂ú·∂†·∂ú, B·∂ú·∂†·∂ú, C·∂ú·∂†·∂ú, A·∂ú·∂ú·∂†, B·∂ú·∂ú·∂†, C·∂ú·∂ú·∂†)

        Œæ *= Œît / Œîx·∂†·∂ú·∂ú(i, j, k, grid)
        Œ∑ *= Œît / Œîy·∂ú·∂†·∂ú(i, j, k, grid)  
        Œæ *= Œît / Œîz·∂ú·∂ú·∂†(i, j, k, grid)

        dÀ£‚ÇÅ = (1 - A‚Çê·∂†·∂ú·∂ú)
        dÀ£‚ÇÇ = (1 - A‚Çê·∂†·∂ú·∂ú^2)
        dÀ£‚ÇÉ = (1 - A‚Çê·∂†·∂ú·∂ú^3)

        cŒ£·µÖ = abs(dÀ£‚ÇÅ) > 0
        cŒ£·µù = cŒ£·µÖ & (abs(dÀ£‚ÇÇ) > 0)
        cŒ£·µû = cŒ£·µù & (abs(dÀ£‚ÇÉ) > 0)
        Œ£À£·µÖ = ifelse(cŒ£·µÖ, 1 / dÀ£‚ÇÅ,                         0)
        Œ£À£·µù = ifelse(cŒ£·µù, - A·∂†·∂ú·∂ú / (dÀ£‚ÇÅ * dÀ£‚ÇÇ),            0)
        Œ£À£·µû = ifelse(cŒ£·µû, 2 * A‚Çê·∂†·∂ú·∂ú^3 / (dÀ£‚ÇÅ * dÀ£‚ÇÇ * dÀ£‚ÇÉ), 0)

        d ∏‚ÇÅ = (1 - B‚Çê·∂ú·∂†·∂ú)
        d ∏‚ÇÇ = (1 - B‚Çê·∂ú·∂†·∂ú^2)
        d ∏‚ÇÉ = (1 - B‚Çê·∂ú·∂†·∂ú^3)

        cŒ£·µÖ = abs(d ∏‚ÇÅ) > 0
        cŒ£·µù = cŒ£·µÖ & (abs(d ∏‚ÇÇ) > 0)
        cŒ£·µû = cŒ£·µù & (abs(d ∏‚ÇÉ) > 0)
        Œ£ ∏·µÖ = ifelse(cŒ£·µÖ, 1 / d ∏‚ÇÅ,                         0)
        Œ£ ∏·µù = ifelse(cŒ£·µù, - B·∂ú·∂†·∂ú / (d ∏‚ÇÅ * d ∏‚ÇÇ),            0)
        Œ£ ∏·µû = ifelse(cŒ£·µû, 2 * B‚Çê·∂ú·∂†·∂ú^3 / (d ∏‚ÇÅ * d ∏‚ÇÇ * d ∏‚ÇÉ), 0)

        d·∂ª‚ÇÅ = (1 - C‚Çê·∂ú·∂ú·∂†)
        d·∂ª‚ÇÇ = (1 - C‚Çê·∂ú·∂ú·∂†^2)
        d·∂ª‚ÇÉ = (1 - C‚Çê·∂ú·∂ú·∂†^3)

        cŒ£·µÖ = abs(d·∂ª‚ÇÅ) > 0
        cŒ£·µù = cŒ£·µÖ & (abs(d·∂ª‚ÇÇ) > 0)
        cŒ£·µû = cŒ£·µù & (abs(d·∂ª‚ÇÉ) > 0)
        Œ£·∂ª·µÖ = ifelse(cŒ£·µÖ, 1 / d·∂ª‚ÇÅ,                         0)
        Œ£·∂ª·µù = ifelse(cŒ£·µù, - C·∂ú·∂ú·∂† / (d·∂ª‚ÇÅ * d·∂ª‚ÇÇ),            0)
        Œ£·∂ª·µû = ifelse(cŒ£·µû, 2 * C‚Çê·∂ú·∂ú·∂†^3 / (d·∂ª‚ÇÅ * d·∂ª‚ÇÇ * d·∂ª‚ÇÉ), 0)

        dÀ£ ∏‚ÇÅ = (1 - abs(A·∂†·∂ú·∂ú   * B·∂†·∂ú·∂ú))
        dÀ£ ∏‚ÇÇ = (1 - abs(A·∂†·∂ú·∂ú^2 * B·∂†·∂ú·∂ú))
        dÀ£ ∏‚ÇÉ = (1 - abs(A·∂†·∂ú·∂ú   * B·∂†·∂ú·∂ú^2))

        cŒ£·µÉ  = (abs(dÀ£‚ÇÅ) > 0) & (abs(dÀ£ ∏‚ÇÅ) > 1)
        cŒ£·µá  = cŒ£·µÉ & (abs(dÀ£ ∏‚ÇÇ) > 0) & (abs(dÀ£‚ÇÇ) > 0)
        cŒ£·∂ú  = cŒ£·µÉ & (abs(dÀ£ ∏‚ÇÉ) > 0) 
        Œ£À£ ∏·µÉ = ifelse(cŒ£·µÉ, - B·∂†·∂ú·∂ú / (dÀ£‚ÇÅ * dÀ£ ∏‚ÇÅ), 0)
        Œ£À£ ∏·µá = ifelse(cŒ£·µá, B·∂†·∂ú·∂ú * A·∂†·∂ú·∂ú / (dÀ£‚ÇÅ * dÀ£ ∏‚ÇÇ) * (B‚Çê·∂†·∂ú·∂ú / dÀ£ ∏‚ÇÅ + 2A·∂†·∂ú·∂ú / dÀ£‚ÇÇ), 0)
        Œ£À£ ∏·∂ú = ifelse(cŒ£·∂ú, A‚Çê·∂†·∂ú·∂ú * B·∂†·∂ú·∂ú^2 / (dÀ£‚ÇÅ * dÀ£ ∏‚ÇÉ * dÀ£ ∏‚ÇÅ), 0)

        d ∏À£‚ÇÅ = (1 - abs(B·∂ú·∂†·∂ú   * A·∂ú·∂†·∂ú))
        d ∏À£‚ÇÇ = (1 - abs(B·∂ú·∂†·∂ú^2 * A·∂ú·∂†·∂ú))
        d ∏À£‚ÇÉ = (1 - abs(B·∂ú·∂†·∂ú   * A·∂ú·∂†·∂ú^2))

        cŒ£·µÉ  = (abs(d ∏‚ÇÅ) > 0) & (abs(d ∏À£‚ÇÅ) > 1)
        cŒ£·µá  = cŒ£·µÉ & (abs(d ∏À£‚ÇÇ) > 0) & (abs(d ∏‚ÇÇ) > 0)
        cŒ£·∂ú  = cŒ£·µÉ & (abs(d ∏À£‚ÇÉ) > 0) 
        Œ£ ∏À£·µÉ = ifelse(cŒ£·µÉ, - A·∂ú·∂†·∂ú / (d ∏‚ÇÅ * d ∏À£‚ÇÅ), 0)
        Œ£ ∏À£·µá = ifelse(cŒ£·µá, A·∂ú·∂†·∂ú * B·∂ú·∂†·∂ú / (d ∏‚ÇÅ * d ∏À£‚ÇÇ) * (A‚Çê·∂ú·∂†·∂ú / d ∏À£‚ÇÅ + 2B·∂ú·∂†·∂ú / d ∏‚ÇÇ), 0)
        Œ£ ∏À£·∂ú = ifelse(cŒ£·∂ú, B‚Çê·∂ú·∂†·∂ú * A·∂ú·∂†·∂ú^2 / (d ∏‚ÇÅ * d ∏À£‚ÇÉ * d ∏À£‚ÇÅ), 0)

        dÀ£·∂ª‚ÇÅ = (1 - abs(A·∂†·∂ú·∂ú   * C·∂†·∂ú·∂ú))
        dÀ£·∂ª‚ÇÇ = (1 - abs(A·∂†·∂ú·∂ú^2 * C·∂†·∂ú·∂ú))
        dÀ£·∂ª‚ÇÉ = (1 - abs(A·∂†·∂ú·∂ú   * C·∂†·∂ú·∂ú^2))

        cŒ£·µÉ  = (abs(dÀ£‚ÇÅ) > 0) & (abs(dÀ£·∂ª‚ÇÅ) > 1)
        cŒ£·µá  = cŒ£·µÉ & (abs(dÀ£·∂ª‚ÇÇ) > 0) & (abs(dÀ£‚ÇÇ) > 0)
        cŒ£·∂ú  = cŒ£·µÉ & (abs(dÀ£·∂ª‚ÇÉ) > 0) 
        Œ£À£·∂ª·µÉ = ifelse(cŒ£·µÉ, - C·∂†·∂ú·∂ú / (dÀ£‚ÇÅ * dÀ£·∂ª‚ÇÅ), 0)
        Œ£À£·∂ª·µá = ifelse(cŒ£·µá, C·∂†·∂ú·∂ú * A·∂†·∂ú·∂ú / (dÀ£‚ÇÅ * dÀ£·∂ª‚ÇÇ) * (C‚Çê·∂†·∂ú·∂ú / dÀ£·∂ª‚ÇÅ + 2A·∂†·∂ú·∂ú / dÀ£‚ÇÇ), 0)
        Œ£À£·∂ª·∂ú = ifelse(cŒ£·∂ú, A‚Çê·∂†·∂ú·∂ú * C·∂†·∂ú·∂ú^2 / (dÀ£‚ÇÅ * dÀ£·∂ª‚ÇÉ * dÀ£·∂ª‚ÇÅ), 0)

        d ∏·∂ª‚ÇÅ = (1 - abs(B·∂ú·∂†·∂ú   * C·∂ú·∂†·∂ú))
        d ∏·∂ª‚ÇÇ = (1 - abs(B·∂ú·∂†·∂ú^2 * C·∂ú·∂†·∂ú))
        d ∏·∂ª‚ÇÉ = (1 - abs(B·∂ú·∂†·∂ú   * C·∂ú·∂†·∂ú^2))

        cŒ£·µÉ  = (abs(d ∏‚ÇÅ) > 0) & (abs(d ∏·∂ª‚ÇÅ) > 1)
        cŒ£·µá  = cŒ£·µÉ & (abs(d ∏·∂ª‚ÇÇ) > 0) & (abs(d ∏‚ÇÇ) > 0)
        cŒ£·∂ú  = cŒ£·µÉ & (abs(d ∏·∂ª‚ÇÉ) > 0) 
        Œ£ ∏·∂ª·µÉ = ifelse(cŒ£·µÉ, - C·∂ú·∂†·∂ú / (d ∏‚ÇÅ * d ∏·∂ª‚ÇÅ), 0)
        Œ£ ∏·∂ª·µá = ifelse(cŒ£·µá, C·∂ú·∂†·∂ú * B·∂ú·∂†·∂ú / (d ∏‚ÇÅ * d ∏·∂ª‚ÇÇ) * (C‚Çê·∂ú·∂†·∂ú / d ∏·∂ª‚ÇÅ + 2B·∂ú·∂†·∂ú / d ∏‚ÇÇ), 0)
        Œ£ ∏·∂ª·∂ú = ifelse(cŒ£·∂ú, B‚Çê·∂ú·∂†·∂ú * C·∂ú·∂†·∂ú^2 / (d ∏‚ÇÅ * d ∏·∂ª‚ÇÉ * d ∏·∂ª‚ÇÅ), 0)

        d·∂ªÀ£‚ÇÅ = (1 - abs(C·∂ú·∂ú·∂†   * A·∂ú·∂ú·∂†))
        d·∂ªÀ£‚ÇÇ = (1 - abs(C·∂ú·∂ú·∂†^2 * A·∂ú·∂ú·∂†))
        d·∂ªÀ£‚ÇÉ = (1 - abs(C·∂ú·∂ú·∂†   * A·∂ú·∂ú·∂†^2))

        cŒ£·µÉ  = (abs(d·∂ª‚ÇÅ) > 0) & (abs(d·∂ªÀ£‚ÇÅ) > 1)
        cŒ£·µá  = cŒ£·µÉ & (abs(d·∂ªÀ£‚ÇÇ) > 0) & (abs(d·∂ª‚ÇÇ) > 0)
        cŒ£·∂ú  = cŒ£·µÉ & (abs(d·∂ªÀ£‚ÇÉ) > 0) 
        Œ£·∂ªÀ£·µÉ = ifelse(cŒ£·µÉ, - A·∂ú·∂ú·∂† / (d·∂ª‚ÇÅ * d·∂ªÀ£‚ÇÅ), 0)
        Œ£·∂ªÀ£·µá = ifelse(cŒ£·µá, A·∂ú·∂ú·∂† * C·∂ú·∂ú·∂† / (d·∂ª‚ÇÅ * d·∂ªÀ£‚ÇÇ) * (A‚Çê·∂ú·∂ú·∂† / d·∂ªÀ£‚ÇÅ + 2C·∂ú·∂ú·∂† / d·∂ª‚ÇÇ), 0)
        Œ£·∂ªÀ£·∂ú = ifelse(cŒ£·∂ú, C‚Çê·∂ú·∂ú·∂† * A·∂ú·∂ú·∂†^2 / (d·∂ª‚ÇÅ * d·∂ªÀ£‚ÇÉ * d·∂ªÀ£‚ÇÅ), 0)

        d·∂ª ∏‚ÇÅ = (1 - abs(C·∂ú·∂ú·∂†   * B·∂ú·∂ú·∂†))
        d·∂ª ∏‚ÇÇ = (1 - abs(C·∂ú·∂ú·∂†^2 * B·∂ú·∂ú·∂†))
        d·∂ª ∏‚ÇÉ = (1 - abs(C·∂ú·∂ú·∂†   * B·∂ú·∂ú·∂†^2))

        cŒ£·µÉ  = (abs(d·∂ª‚ÇÅ) > 0) & (abs(d·∂ª ∏‚ÇÅ) > 1)
        cŒ£·µá  = cŒ£·µÉ & (abs(d·∂ª ∏‚ÇÇ) > 0) & (abs(d·∂ª‚ÇÇ) > 0)
        cŒ£·∂ú  = cŒ£·µÉ & (abs(d·∂ª ∏‚ÇÉ) > 0) 
        Œ£·∂ª ∏·µÉ = ifelse(cŒ£·µÉ, - B·∂ú·∂ú·∂† / (d·∂ª‚ÇÅ * d·∂ª ∏‚ÇÅ), 0)
        Œ£·∂ª ∏·µá = ifelse(cŒ£·µá, B·∂ú·∂ú·∂† * C·∂ú·∂ú·∂† / (d·∂ª‚ÇÅ * d·∂ª ∏‚ÇÇ) * (B‚Çê·∂ú·∂ú·∂† / d·∂ª ∏‚ÇÅ + 2C·∂ú·∂ú·∂† / d·∂ª‚ÇÇ), 0)
        Œ£·∂ª ∏·∂ú = ifelse(cŒ£·∂ú, C‚Çê·∂ú·∂ú·∂† * B·∂ú·∂ú·∂†^2 / (d·∂ª‚ÇÅ * d·∂ª ∏‚ÇÉ * d·∂ª ∏‚ÇÅ), 0)

        u·µñ[i, j, k] = (Œ£À£·µÖ * Œæ + Œ£À£·µù * Œæ^2 + Œ£À£·µû * Œæ^3 + 
                       Œ£À£ ∏·µÉ * Œæ * Œ∑ + Œ£À£ ∏·µá * Œæ^2 * Œ∑ + Œ£À£ ∏·∂ú * Œæ * Œ∑^2 +
                       Œ£À£·∂ª·µÉ * Œæ * Œ∂ + Œ£À£·∂ª·µá * Œæ^2 * Œ∂ + Œ£À£·∂ª·∂ú * Œæ * Œ∂^2) * Œîx·∂†·∂ú·∂ú(i, j, k, grid) / Œît
        v·µñ[i, j, k] = (Œ£ ∏·µÖ * Œ∑ + Œ£ ∏·µù * Œ∑^2 + Œ£ ∏·µû * Œ∑^3 + 
                       Œ£ ∏À£·µÉ * Œ∑ * Œæ + Œ£ ∏À£·µá * Œ∑^2 * Œæ + Œ£ ∏À£·∂ú * Œ∑ * Œæ^2 +
                       Œ£ ∏·∂ª·µÉ * Œ∑ * Œ∂ + Œ£ ∏·∂ª·µá * Œ∑^2 * Œ∂ + Œ£ ∏·∂ª·∂ú * Œ∑ * Œ∂^2) * Œîy·∂ú·∂†·∂ú(i, j, k, grid) / Œît
        w·µñ[i, j, k] = (Œ£·∂ª·µÖ * Œ∑ + Œ£·∂ª·µù * Œ∑^2 + Œ£·∂ª·µû * Œ∑^3 + 
                       Œ£·∂ªÀ£·µÉ * Œ∂ * Œæ + Œ£·∂ªÀ£·µá * Œ∂^2 * Œæ + Œ£·∂ªÀ£·∂ú * Œ∂ * Œæ^2 +
                       Œ£·∂ª ∏·µÉ * Œ∂ * Œ∑ + Œ£·∂ª ∏·µá * Œ∂^2 * Œ∑ + Œ£·∂ª ∏·∂ú * Œ∂ * Œ∑^2) * Œîz·∂ú·∂ú·∂†(i, j, k, grid) / Œît
        
        
        u·µñ[i, j, k] = min(u_abs, abs(u·µñ[i, j, k])) * sign(u·µñ[i, j, k])
        v·µñ[i, j, k] = min(v_abs, abs(v·µñ[i, j, k])) * sign(v·µñ[i, j, k])
        w·µñ[i, j, k] = min(w_abs, abs(w·µñ[i, j, k])) * sign(w·µñ[i, j, k])
    end 
end

@inline abs_œà(i, j, k, grid, œà) = abs(œà[i, j, k])

@inline function mpdata_auxiliaries(i, j, k, grid, œà)

    œà‚ÇÅ·∂†·∂ú·∂ú = 2 * ‚Ñëx·∂†·µÉ·µÉ(i, j, k, grid, abs_œà, œà)
    œà‚ÇÅ·∂ú·∂†·∂ú = 2 * ‚Ñëy·µÉ·∂†·µÉ(i, j, k, grid, abs_œà, œà)
    œà‚ÇÅ·∂ú·∂ú·∂† = 2 * ‚Ñëz·µÉ·µÉ·∂†(i, j, k, grid, abs_œà, œà)
    Œîœà‚ÇÅ·∂†·∂ú·∂ú = Œ¥x·∂†·µÉ·µÉ(i, j, k, grid, abs_œà, œà)
    Œîœà‚ÇÅ·∂ú·∂†·∂ú = Œ¥y·µÉ·∂†·µÉ(i, j, k, grid, abs_œà, œà)
    Œîœà‚ÇÅ·∂ú·∂ú·∂† = Œ¥z·µÉ·µÉ·∂†(i, j, k, grid, abs_œà, œà)

    # Calculating A and B
    @inbounds begin
        œà‚ÇÇ·∂†·∂ú·∂ú = (abs(œà[i, j+1, k]) + abs(œà[i-1, j+1, k]) + abs(œà[i, j-1, k]) + abs(œà[i-1, j-1, k]))
        œà‚ÇÇ·∂ú·∂†·∂ú = (abs(œà[i+1, j, k]) + abs(œà[i+1, j-1, k]) + abs(œà[i-1, j, k]) + abs(œà[i-1, j-1, k]))
        œà‚ÇÇ·∂ú·∂ú·∂† = (abs(œà[i, j, k+1]) + abs(œà[i-1, j, k+1]) + abs(œà[i, j, k-1]) + abs(œà[i-1, j, k-1]))

        Œîœà‚ÇÇ·∂†·∂ú·∂ú = (abs(œà[i, j+1, k]) + abs(œà[i-1, j+1, k]) - abs(œà[i, j-1, k]) - abs(œà[i-1, j-1, k]))
        Œîœà‚ÇÇ·∂ú·∂†·∂ú = (abs(œà[i+1, j, k]) + abs(œà[i+1, j-1, k]) - abs(œà[i-1, j, k]) - abs(œà[i-1, j-1, k]))
        Œîœà‚ÇÇ·∂ú·∂ú·∂† = (abs(œà[i, j, k+1]) + abs(œà[i-1, j, k+1]) - abs(œà[i, j, k-1]) - abs(œà[i-1, j, k-1]))

        œà‚ÇÉ·∂†·∂ú·∂ú = (abs(œà[i+1, j, k]) + abs(œà[i+1, j, k-1]) + abs(œà[i-1, j, k]) + abs(œà[i-1, j, k-1]))
        œà‚ÇÉ·∂ú·∂†·∂ú = (abs(œà[i, j+1, k]) + abs(œà[i, j+1, k-1]) + abs(œà[i, j-1, k]) + abs(œà[i, j-1, k-1]))
        œà‚ÇÉ·∂ú·∂ú·∂† = (abs(œà[i, j, k+1]) + abs(œà[i, j-1, k+1]) + abs(œà[i, j, k-1]) + abs(œà[i, j-1, k-1]))

        Œîœà‚ÇÉ·∂†·∂ú·∂ú = (abs(œà[i+1, j, k]) + abs(œà[i+1, j, k-1]) - abs(œà[i-1, j, k]) - abs(œà[i-1, j, k-1]))
        Œîœà‚ÇÉ·∂ú·∂†·∂ú = (abs(œà[i, j+1, k]) + abs(œà[i, j+1, k-1]) - abs(œà[i, j-1, k]) - abs(œà[i, j-1, k-1]))
        Œîœà‚ÇÉ·∂ú·∂ú·∂† = (abs(œà[i, j, k+1]) + abs(œà[i, j-1, k+1]) - abs(œà[i, j, k-1]) - abs(œà[i, j-1, k-1]))

        A·∂†·∂ú·∂ú = ifelse(abs(œà‚ÇÅ·∂†·∂ú·∂ú) > 0, Œîœà‚ÇÅ·∂†·∂ú·∂ú / œà‚ÇÅ·∂†·∂ú·∂ú, 0)
        B·∂†·∂ú·∂ú = ifelse(abs(œà‚ÇÇ·∂†·∂ú·∂ú) > 0, Œîœà‚ÇÇ·∂†·∂ú·∂ú / œà‚ÇÇ·∂†·∂ú·∂ú, 0)
        C·∂†·∂ú·∂ú = ifelse(abs(œà‚ÇÉ·∂†·∂ú·∂ú) > 0, Œîœà‚ÇÉ·∂†·∂ú·∂ú / œà‚ÇÉ·∂†·∂ú·∂ú, 0)

        A·∂ú·∂†·∂ú = ifelse(abs(œà‚ÇÇ·∂ú·∂†·∂ú) > 0, Œîœà‚ÇÇ·∂ú·∂†·∂ú / œà‚ÇÇ·∂ú·∂†·∂ú, 0)
        B·∂ú·∂†·∂ú = ifelse(abs(œà‚ÇÅ·∂ú·∂†·∂ú) > 0, Œîœà‚ÇÅ·∂ú·∂†·∂ú / œà‚ÇÅ·∂ú·∂†·∂ú, 0)
        C·∂ú·∂†·∂ú = ifelse(abs(œà‚ÇÉ·∂ú·∂†·∂ú) > 0, Œîœà‚ÇÉ·∂ú·∂†·∂ú / œà‚ÇÉ·∂ú·∂†·∂ú, 0)

        A·∂ú·∂ú·∂† = ifelse(abs(œà‚ÇÇ·∂ú·∂ú·∂†) > 0, Œîœà‚ÇÇ·∂ú·∂ú·∂† / œà‚ÇÇ·∂ú·∂ú·∂†, 0)
        B·∂ú·∂ú·∂† = ifelse(abs(œà‚ÇÉ·∂ú·∂ú·∂†) > 0, Œîœà‚ÇÉ·∂ú·∂ú·∂† / œà‚ÇÉ·∂ú·∂ú·∂†, 0)
        C·∂ú·∂ú·∂† = ifelse(abs(œà‚ÇÅ·∂ú·∂ú·∂†) > 0, Œîœà‚ÇÅ·∂ú·∂ú·∂† / œà‚ÇÅ·∂ú·∂ú·∂†, 0)        
    end

    return A·∂†·∂ú·∂ú, B·∂†·∂ú·∂ú, C·∂†·∂ú·∂ú, A·∂ú·∂†·∂ú, B·∂ú·∂†·∂ú, C·∂ú·∂†·∂ú, A·∂ú·∂ú·∂†, B·∂ú·∂ú·∂†, C·∂ú·∂ú·∂†
end

@inline function mpdata_pseudo_velocities(i, j, k, grid, Œît, U, A·∂†·∂ú·∂ú, B·∂†·∂ú·∂ú, C·∂†·∂ú·∂ú, A·∂ú·∂†·∂ú, B·∂ú·∂†·∂ú, C·∂ú·∂†·∂ú, A·∂ú·∂ú·∂†, B·∂ú·∂ú·∂†, C·∂ú·∂ú·∂†)

    u·µñ, v·µñ, w·µñ = U

    u_abs = abs(u·µñ[i, j, k])
    v_abs = abs(v·µñ[i, j, k])
    w_abs = abs(w·µñ[i, j, k])

    uÃÖ·∂†·∂ú·∂ú = abs(u·µñ[i, j, k]) * Œît / Œîx·∂†·∂ú·∂ú(i, j, k, grid)
    vÃÖ·∂ú·∂†·∂ú = abs(v·µñ[i, j, k]) * Œît / Œîy·∂ú·∂†·∂ú(i, j, k, grid)  
    wÃÖ·∂ú·∂ú·∂† = abs(w·µñ[i, j, k]) * Œît / Œîz·∂ú·∂ú·∂†(i, j, k, grid) 

    uÃÖ·∂ú·∂†·∂ú = ‚Ñëxy·∂ú·∂†·µÉ(i, j, k, grid, u·µñ) * Œît / Œîx·∂ú·∂†·∂ú(i, j, k, grid)
    uÃÖ·∂ú·∂ú·∂† = ‚Ñëxz·∂ú·µÉ·∂†(i, j, k, grid, u·µñ) * Œît / Œîx·∂ú·∂ú·∂†(i, j, k, grid)
    vÃÖ·∂†·∂ú·∂ú = ‚Ñëxy·∂†·∂ú·µÉ(i, j, k, grid, v·µñ) * Œît / Œîy·∂†·∂ú·∂ú(i, j, k, grid) 
    vÃÖ·∂ú·∂ú·∂† = ‚Ñëyz·∂ú·µÉ·∂†(i, j, k, grid, v·µñ) * Œît / Œîy·∂ú·∂ú·∂†(i, j, k, grid)  
    wÃÖ·∂†·∂ú·∂ú = ‚Ñëxz·∂†·µÉ·∂ú(i, j, k, grid, w·µñ) * Œît / Œîz·∂†·∂ú·∂ú(i, j, k, grid)  
    wÃÖ·∂ú·∂†·∂ú = ‚Ñëyz·µÉ·∂†·∂ú(i, j, k, grid, w·µñ) * Œît / Œîz·∂ú·∂†·∂ú(i, j, k, grid)  

    Œæ = u_abs * (1 - uÃÖ·∂†·∂ú·∂ú) * A·∂†·∂ú·∂ú - u·µñ[i, j, k] * vÃÖ·∂†·∂ú·∂ú * B·∂†·∂ú·∂ú - u·µñ[i, j, k] * wÃÖ·∂†·∂ú·∂ú * C·∂†·∂ú·∂ú
    Œ∑ = v_abs * (1 - vÃÖ·∂ú·∂†·∂ú) * B·∂ú·∂†·∂ú - v·µñ[i, j, k] * uÃÖ·∂ú·∂†·∂ú * A·∂ú·∂†·∂ú - v·µñ[i, j, k] * wÃÖ·∂†·∂ú·∂ú * C·∂ú·∂†·∂ú
    Œ∂ = w_abs * (1 - wÃÖ·∂ú·∂ú·∂†) * C·∂ú·∂ú·∂† - w·µñ[i, j, k] * uÃÖ·∂ú·∂ú·∂† * A·∂ú·∂ú·∂† - w·µñ[i, j, k] * vÃÖ·∂ú·∂ú·∂† * B·∂ú·∂ú·∂†

    return Œæ, Œ∑, Œ∂
end

# The actual MPData correction
@kernel function _update_tracer!(c, scheme, pseudo_velocities, grid, divUc, Œît)
    i, j, k = @index(Global, NTuple)

    ‚àáuc = divUc(i, j, k, grid, scheme, pseudo_velocities, c)
    @inbounds c[i, j, k] -= Œît * ‚àáuc
end

# Vertical does not matter at the moment!
@inline function div_ùêØu(i, j, k, grid, advection::PartialMPData, U, u)
    return 1/V·∂†·∂ú·∂ú(i, j, k, grid) * (Œ¥x·∂†·µÉ·µÉ(i, j, k, grid, _advective_momentum_flux_Uu, advection,  U[1], u) +
                                    Œ¥y·µÉ·∂ú·µÉ(i, j, k, grid, _advective_momentum_flux_Vu, advection,  U[2], u) +
                                    Œ¥z·µÉ·µÉ·∂ú(i, j, k, grid, _advective_momentum_flux_Wu, advection.vertical_advection, U[3], u))
end

@inline function div_ùêØv(i, j, k, grid, advection::PartialMPData, U, v)
    return 1/V·∂ú·∂†·∂ú(i, j, k, grid) * (Œ¥x·∂ú·µÉ·µÉ(i, j, k, grid, _advective_momentum_flux_Uv, advection,  U[1], v) +
                                    Œ¥y·µÉ·∂†·µÉ(i, j, k, grid, _advective_momentum_flux_Vv, advection,  U[2], v) +
                                    Œ¥z·µÉ·µÉ·∂ú(i, j, k, grid, _advective_momentum_flux_Wv, advection.vertical_advection, U[3], v))
end