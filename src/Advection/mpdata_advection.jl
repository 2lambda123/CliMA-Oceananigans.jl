using Oceananigans.BoundaryConditions
using Oceananigans.Fields
using Oceananigans.Fields: VelocityFields, location
using KernelAbstractions: @kernel, @index
using Oceananigans.Utils

struct MPData{FT, I, A} <: AbstractUpwindBiasedAdvectionScheme{1, FT} 
    velocities :: A
    iterations :: I
end

function MPData(grid; iterations = nothing)
    velocities = VelocityFields(grid)
    return MPData{eltype(grid), typeof(iterations), typeof(velocities)}(velocities, iterations)
end

# Optimal MPData scheme from "Antidiffusive Velocities for Multipass Donor Cell Advection"
# which has only two passes
const OptimalMPData = MPData{<:Any, <:Nothing}

# Basically just first order upwind (also called the "donor cell" scheme)
@inline symmetric_interpolate_x·∂†·µÉ·µÉ(i, j, k, grid, ::MPData, c, args...) = ‚Ñëx·∂†·µÉ·µÉ(i, j, k, grid, c, args...)
@inline symmetric_interpolate_y·µÉ·∂†·µÉ(i, j, k, grid, ::MPData, c, args...) = ‚Ñëy·µÉ·∂†·µÉ(i, j, k, grid, c, args...)
@inline symmetric_interpolate_z·µÉ·µÉ·∂†(i, j, k, grid, ::MPData, c, args...) = ‚Ñëz·µÉ·µÉ·∂†(i, j, k, grid, c, args...)

@inline symmetric_interpolate_x·∂ú·µÉ·µÉ(i, j, k, grid, ::MPData, u, args...) = ‚Ñëx·∂ú·µÉ·µÉ(i, j, k, grid, u, args...)
@inline symmetric_interpolate_y·µÉ·∂ú·µÉ(i, j, k, grid, ::MPData, v, args...) = ‚Ñëy·µÉ·∂ú·µÉ(i, j, k, grid, v, args...)
@inline symmetric_interpolate_z·µÉ·µÉ·∂ú(i, j, k, grid, ::MPData, w, args...) = ‚Ñëz·µÉ·µÉ·∂ú(i, j, k, grid, w, args...)

@inline inner_left_biased_interpolate_x·∂†·µÉ·µÉ(i, j, k, grid, ::MPData, œà, idx, loc, args...) = @inbounds œà[i-1, j, k]
@inline inner_left_biased_interpolate_y·µÉ·∂†·µÉ(i, j, k, grid, ::MPData, œà, idx, loc, args...) = @inbounds œà[i, j-1, k]
@inline inner_left_biased_interpolate_z·µÉ·µÉ·∂†(i, j, k, grid, ::MPData, œà, idx, loc, args...) = @inbounds œà[i, j, k-1]

@inline inner_right_biased_interpolate_x·∂†·µÉ·µÉ(i, j, k, grid, ::MPData, œà, idx, loc, args...) = @inbounds œà[i, j, k]
@inline inner_right_biased_interpolate_y·µÉ·∂†·µÉ(i, j, k, grid, ::MPData, œà, idx, loc, args...) = @inbounds œà[i, j, k]
@inline inner_right_biased_interpolate_z·µÉ·µÉ·∂†(i, j, k, grid, ::MPData, œà, idx, loc, args...) = @inbounds œà[i, j, k]

@inline inner_left_biased_interpolate_x·∂†·µÉ·µÉ(i, j, k, grid, ::MPData, œà::Function, idx, loc, args...) = @inbounds œà(i-1, j, k, grid, args...)
@inline inner_left_biased_interpolate_y·µÉ·∂†·µÉ(i, j, k, grid, ::MPData, œà::Function, idx, loc, args...) = @inbounds œà(i, j-1, k, grid, args...)
@inline inner_left_biased_interpolate_z·µÉ·µÉ·∂†(i, j, k, grid, ::MPData, œà::Function, idx, loc, args...) = @inbounds œà(i, j, k-1, grid, args...)

@inline inner_right_biased_interpolate_x·∂†·µÉ·µÉ(i, j, k, grid, ::MPData, œà::Function, idx, loc, args...) = @inbounds œà(i, j, k, grid, args...)
@inline inner_right_biased_interpolate_y·µÉ·∂†·µÉ(i, j, k, grid, ::MPData, œà::Function, idx, loc, args...) = @inbounds œà(i, j, k, grid, args...)
@inline inner_right_biased_interpolate_z·µÉ·µÉ·∂†(i, j, k, grid, ::MPData, œà::Function, idx, loc, args...) = @inbounds œà(i, j, k, grid, args...)

function correct_advection!(model, Œît)
    grid = model.grid
    velocities = model.velocities
    
    for tracer_name in propertynames(model.tracers)
        @inbounds tracer = model.tracers[tracer_name]
        @inbounds scheme = model.advection[tracer_name]
        correct_mpdata_advection!(tracer, grid, Œît, velocities, scheme)
    end
end

correct_mpdata_advection!(field, grid, Œît, velocities, scheme) = nothing 

function correct_mpdata_advection!(field, grid, Œît, velocities, scheme::MPData) 
    pseudo_velocities = scheme.velocities
    loc = location(field)

    set!(pseudo_velocities.u, velocities.u)
    set!(pseudo_velocities.v, velocities.v)

    divUc = # "Extractor function
          loc === (Center, Center, Center) ? div_Uc :
          loc === (Face, Center, Center)   ? div_ùêØu :
          loc === (Center, Face, Center)   ? div_ùêØv :
          loc === (Center, Center, Face)   ? div_ùêØw :
          error("Cannot MPData-correct for a field at $location")

    mpdata_iterate!(field, grid, scheme, pseudo_velocities, Œît, divUc)

    return nothing
end

function mpdata_iterate!(field, grid, scheme::OptimalMPData, pseudo_velocities, Œît, divUc)

    fill_halo_regions!(field)
    launch!(architecture(grid), grid, :xyz, _calculate_optimal_mpdata_velocities!, 
            pseudo_velocities, grid, field, Œît)

    fill_halo_regions!(pseudo_velocities)
    launch!(architecture(grid), grid, :xyz, _update_tracer!, field, 
            scheme, pseudo_velocities, grid, divUc, Œît) 

    return nothing
end

function mpdata_iterate!(field, grid, scheme, pseudo_velocities, Œît, divUc)

    for iter in 1:scheme.iterations
        fill_halo_regions!(field)
        launch!(architecture(grid), grid, :xyz, _calculate_mpdata_velocities!, 
                pseudo_velocities, grid, field, Œît)

        fill_halo_regions!(pseudo_velocities)
        launch!(architecture(grid), grid, :xyz, _update_tracer!, field, scheme, 
                pseudo_velocities, grid, divUc, Œît) 
    end

    return nothing
end

""" 
Pseudo-velocities are calculated as:

u·µñ = abs(u)(1 - abs(u)) A - u v B
v·µñ = abs(v)(1 - abs(v)) A - u v A

where A = Œîx / 2œà ‚àÇx(œà)
and   B = Œîy / 2œà ‚àÇy(œà)
"""
@kernel function _calculate_mpdata_velocities!(velocities, grid, œà, Œît)
    i, j, k = @index(Global, NTuple)

    A·∂†·∂ú·∂ú, B·∂†·∂ú·∂ú, A·∂ú·∂†·∂ú, B·∂ú·∂†·∂ú = mpdata_auxiliaries(i, j, k, grid, œà)
    u·µñ, v·µñ, w·µñ = velocities

    Œæ, Œ∑ = mpdata_pseudo_velocities(i, j, k, grid, velocities, A·∂†·∂ú·∂ú, B·∂†·∂ú·∂ú, A·∂ú·∂†·∂ú, B·∂ú·∂†·∂ú)

    @inbounds begin
        u·µñ[i, j, k] = min(u_abs, abs(Œæ)) * sign(Œæ)
        v·µñ[i, j, k] = min(v_abs, abs(Œ∑)) * sign(Œ∑)
    end 
end

""" 
Pseudo-velocities are calculated as:

u·µñ = ‚àë‚ÇÅ‚àû abs(u·¥æ)(1 - abs(u·¥æ)) A - u·¥æ v·¥æ B
v·µñ = ‚àë‚ÇÅ‚àû abs(v·¥æ)(1 - abs(v·¥æ)) A - u·¥æ v·¥æ A

where A = Œîx / 2œà ‚àÇx(œà) stays fixed
and   B = Œîy / 2œà ‚àÇy(œà) stays fixed
"""
@kernel function _calculate_optimal_mpdata_velocities!(velocities, grid, œà, Œît)
    i, j, k = @index(Global, NTuple)

    u·µñ, v·µñ, w·µñ = velocities
    A·∂†·∂ú·∂ú, B·∂†·∂ú·∂ú, A·∂ú·∂†·∂ú, B·∂ú·∂†·∂ú = mpdata_auxiliaries(i, j, k, grid, œà)

    @inbounds begin
        u_abs = abs(u·µñ[i, j, k])
        v_abs = abs(v·µñ[i, j, k])
        
        A‚Çê·∂†·∂ú·∂ú = abs(A·∂†·∂ú·∂ú)
        B‚Çê·∂†·∂ú·∂ú = abs(B·∂†·∂ú·∂ú)
        A‚Çê·∂ú·∂†·∂ú = abs(A·∂ú·∂†·∂ú)
        B‚Çê·∂ú·∂†·∂ú = abs(B·∂ú·∂†·∂ú)

        Œæ, Œ∑ = mpdata_pseudo_velocities(i, j, k, grid, velocities, A·∂†·∂ú·∂ú, B·∂†·∂ú·∂ú, A·∂ú·∂†·∂ú, B·∂ú·∂†·∂ú)

        Œæ *= Œît / Œîx·∂†·∂ú·∂ú(i, j, k, grid)
        Œ∑ *= Œît / Œîy·∂ú·∂†·∂ú(i, j, k, grid)  

        d·µÉ‚ÇÅ = (1 - A‚Çê·∂†·∂ú·∂ú)
        d·µÉ‚ÇÇ = (1 - A‚Çê·∂†·∂ú·∂ú^2)
        d·µÉ‚ÇÉ = (1 - A‚Çê·∂†·∂ú·∂ú^3)

        cŒ£·µÖ = abs(d·µÉ‚ÇÅ) > 0
        cŒ£·µù = cŒ£·µÖ & (abs(d·µÉ‚ÇÇ) > 0)
        cŒ£·µû = cŒ£·µù & (abs(d·µÉ‚ÇÉ) > 0)
        Œ£À£·µÖ = ifelse(cŒ£·µÖ, 1 / d·µÉ‚ÇÅ,                         0)
        Œ£À£·µù = ifelse(cŒ£·µù, - A·∂†·∂ú·∂ú / (d·µÉ‚ÇÅ * d·µÉ‚ÇÇ),            0)
        Œ£À£·µû = ifelse(cŒ£·µû, 2 * A‚Çê·∂†·∂ú·∂ú^3 / (d·µÉ‚ÇÅ * d·µÉ‚ÇÇ * d·µÉ‚ÇÉ), 0)

        d·µá‚ÇÅ = (1 - B‚Çê·∂ú·∂†·∂ú)
        d·µá‚ÇÇ = (1 - B‚Çê·∂ú·∂†·∂ú^2)
        d·µá‚ÇÉ = (1 - B‚Çê·∂ú·∂†·∂ú^3)

        cŒ£·µÖ = abs(d·µá‚ÇÅ) > 0
        cŒ£·µù = cŒ£·µÖ & (abs(d·µá‚ÇÇ) > 0)
        cŒ£·µû = cŒ£·µù & (abs(d·µá‚ÇÉ) > 0)
        Œ£ ∏·µÖ = ifelse(cŒ£·µÖ, 1 / d·µá‚ÇÅ,                         0)
        Œ£ ∏·µù = ifelse(cŒ£·µù, - B·∂ú·∂†·∂ú / (d·µá‚ÇÅ * d·µá‚ÇÇ),            0)
        Œ£ ∏·µû = ifelse(cŒ£·µû, 2 * B‚Çê·∂ú·∂†·∂ú^3 / (d·µá‚ÇÅ * d·µá‚ÇÇ * d·µá‚ÇÉ), 0)

        d·µÉ·µá‚ÇÅ = (1 - abs(A·∂†·∂ú·∂ú   * B·∂†·∂ú·∂ú))
        d·µÉ·µá‚ÇÇ = (1 - abs(A·∂†·∂ú·∂ú^2 * B·∂†·∂ú·∂ú))
        d·µÉ·µá‚ÇÉ = (1 - abs(A·∂†·∂ú·∂ú   * B·∂†·∂ú·∂ú^2))

        cŒ£·µÉ = (abs(d·µÉ‚ÇÅ) > 0) & (abs(d·µÉ·µá‚ÇÅ) > 1)
        cŒ£·µá = cŒ£·µÉ & (abs(d·µÉ·µá‚ÇÇ) > 0) & (abs(d·µÉ‚ÇÇ) > 0)
        cŒ£·∂ú = cŒ£·µÉ & (abs(d·µÉ·µá‚ÇÉ) > 0) 
        Œ£À£·µÉ = ifelse(cŒ£·µÉ, - B·∂†·∂ú·∂ú / (d·µÉ‚ÇÅ * d·µÉ·µá‚ÇÅ), 0)
        Œ£À£·µá = ifelse(cŒ£·µá, B·∂†·∂ú·∂ú * A·∂†·∂ú·∂ú / (d·µÉ‚ÇÅ * d·µÉ·µá‚ÇÇ) * (B‚Çê·∂†·∂ú·∂ú / d·µÉ·µá‚ÇÅ + 2A·∂†·∂ú·∂ú / d·µÉ‚ÇÇ), 0)
        Œ£À£·∂ú = ifelse(cŒ£·∂ú, A‚Çê·∂†·∂ú·∂ú * B·∂†·∂ú·∂ú^2 / (d·µÉ‚ÇÅ * d·µÉ·µá‚ÇÉ * d·µÉ·µá‚ÇÅ), 0)

        d·µÉ·µá‚ÇÅ = (1 - abs(B·∂ú·∂†·∂ú   * A·∂ú·∂†·∂ú))
        d·µÉ·µá‚ÇÇ = (1 - abs(B·∂ú·∂†·∂ú^2 * A·∂ú·∂†·∂ú))
        d·µÉ·µá‚ÇÉ = (1 - abs(B·∂ú·∂†·∂ú   * A·∂ú·∂†·∂ú^2))

        cŒ£·µÉ = (abs(d·µá‚ÇÅ) > 0) & (abs(d·µÉ·µá‚ÇÅ) > 1)
        cŒ£·µá = cŒ£·µÉ & (abs(d·µÉ·µá‚ÇÇ) > 0) & (abs(d·µá‚ÇÇ) > 0)
        cŒ£·∂ú = cŒ£·µÉ & (abs(d·µÉ·µá‚ÇÉ) > 0) 
        Œ£ ∏·µÉ = ifelse(cŒ£·µÉ, - A·∂ú·∂†·∂ú / (d·µá‚ÇÅ * d·µÉ·µá‚ÇÅ), 0)
        Œ£ ∏·µá = ifelse(cŒ£·µá, A·∂ú·∂†·∂ú * B·∂ú·∂†·∂ú / (d·µá‚ÇÅ * d·µÉ·µá‚ÇÇ) * (A‚Çê·∂ú·∂†·∂ú / d·µÉ·µá‚ÇÅ + 2B·∂ú·∂†·∂ú / d·µá‚ÇÇ), 0)
        Œ£ ∏·∂ú = ifelse(cŒ£·∂ú, B‚Çê·∂ú·∂†·∂ú * A·∂ú·∂†·∂ú^2 / (d·µá‚ÇÅ * d·µÉ·µá‚ÇÉ * d·µÉ·µá‚ÇÅ), 0)

        u·µñ[i, j, k] = (Œ£À£·µÖ * Œæ + Œ£À£·µù * Œæ^2 + Œ£À£·µû * Œæ^3 + Œ£À£·µÉ * Œæ * Œ∑ + Œ£À£·µá * Œæ^2 * Œ∑ + Œ£À£·∂ú * Œæ * Œ∑^2) * Œîx·∂†·∂ú·∂ú(i, j, k, grid) / Œît
        v·µñ[i, j, k] = (Œ£ ∏·µÖ * Œ∑ + Œ£ ∏·µù * Œ∑^2 + Œ£ ∏·µû * Œ∑^3 + Œ£ ∏·µÉ * Œæ * Œ∑ + Œ£ ∏·µá * Œ∑^2 * Œæ + Œ£ ∏·∂ú * Œ∑ * Œæ^2) * Œîy·∂ú·∂†·∂ú(i, j, k, grid) / Œît
        
        u·µñ[i, j, k] = min(u_abs, abs(u·µñ[i, j, k])) * sign(u·µñ[i, j, k])
        v·µñ[i, j, k] = min(v_abs, abs(v·µñ[i, j, k])) * sign(v·µñ[i, j, k])
    end 
end

@inline function mpdata_auxiliaries(i, j, k, grid, œà)

    œà‚ÇÅ·∂†·∂ú·∂ú = 2 * ‚Ñëx·∂†·µÉ·µÉ(i, j, k, grid, œà)
    œà‚ÇÅ·∂ú·∂†·∂ú = 2 * ‚Ñëy·µÉ·∂†·µÉ(i, j, k, grid, œà)
    Œîœà‚ÇÅ·∂†·∂ú·∂ú = Œ¥x·∂†·µÉ·µÉ(i, j, k, grid, œà)
    Œîœà‚ÇÅ·∂ú·∂†·∂ú = Œ¥y·µÉ·∂†·µÉ(i, j, k, grid, œà)

    # Calculating A and B
    @inbounds begin
        œà‚ÇÇ·∂†·∂ú·∂ú = (œà[i, j+1, k] + œà[i-1, j+1, k] + œà[i, j-1, k] + œà[i-1, j-1, k])
        œà‚ÇÇ·∂ú·∂†·∂ú = (œà[i+1, j, k] + œà[i+1, j-1, k] + œà[i-1, j, k] + œà[i-1, j-1, k])

        Œîœà‚ÇÇ·∂†·∂ú·∂ú = (œà[i, j+1, k] + œà[i-1, j+1, k] - œà[i, j-1, k] - œà[i-1, j-1, k])
        Œîœà‚ÇÇ·∂ú·∂†·∂ú = (œà[i+1, j, k] + œà[i+1, j-1, k] - œà[i-1, j, k] - œà[i-1, j-1, k])

        A·∂†·∂ú·∂ú = ifelse(abs(œà‚ÇÅ·∂†·∂ú·∂ú) > 0, Œîœà‚ÇÅ·∂†·∂ú·∂ú / œà‚ÇÅ·∂†·∂ú·∂ú, 0)
        B·∂†·∂ú·∂ú = ifelse(abs(œà‚ÇÇ·∂†·∂ú·∂ú) > 0, Œîœà‚ÇÇ·∂†·∂ú·∂ú / œà‚ÇÇ·∂†·∂ú·∂ú, 0)
        A·∂ú·∂†·∂ú = ifelse(abs(œà‚ÇÇ·∂ú·∂†·∂ú) > 0, Œîœà‚ÇÇ·∂ú·∂†·∂ú / œà‚ÇÇ·∂ú·∂†·∂ú, 0)
        B·∂ú·∂†·∂ú = ifelse(abs(œà‚ÇÅ·∂ú·∂†·∂ú) > 0, Œîœà‚ÇÅ·∂ú·∂†·∂ú / œà‚ÇÅ·∂ú·∂†·∂ú, 0)
    end

    return A·∂†·∂ú·∂ú, B·∂†·∂ú·∂ú, A·∂ú·∂†·∂ú, B·∂ú·∂†·∂ú
end

@inline function mpdata_pseudo_velocities(i, j, k, grid, U, A·∂†·∂ú·∂ú, B·∂†·∂ú·∂ú, A·∂ú·∂†·∂ú, B·∂ú·∂†·∂ú)

    u·¥æ, v·¥æ, _ = U

    u_abs = abs(u·µñ[i, j, k])
    v_abs = abs(v·µñ[i, j, k])

    uÃÖ·∂†·∂ú·∂ú = abs(u·µñ[i, j, k]) * Œît / Œîx·∂†·∂ú·∂ú(i, j, k, grid)
    vÃÖ·∂ú·∂†·∂ú = abs(v·µñ[i, j, k]) * Œît / Œîy·∂ú·∂†·∂ú(i, j, k, grid)  
    uÃÖ·∂ú·∂†·∂ú = ‚Ñëxy·∂ú·∂†·µÉ(i, j, k, grid, u·µñ) * Œît / Œîx·∂ú·∂†·∂ú(i, j, k, grid)
    vÃÖ·∂†·∂ú·∂ú = ‚Ñëxy·∂†·∂ú·µÉ(i, j, k, grid, v·µñ) * Œît / Œîy·∂†·∂ú·∂ú(i, j, k, grid)  

    Œæ = u_abs * (1 - uÃÖ·∂†·∂ú·∂ú) * A·∂†·∂ú·∂ú - u·µñ[i, j, k] * vÃÖ·∂†·∂ú·∂ú * B·∂†·∂ú·∂ú
    Œ∑ = v_abs * (1 - vÃÖ·∂ú·∂†·∂ú) * B·∂ú·∂†·∂ú - v·µñ[i, j, k] * uÃÖ·∂ú·∂†·∂ú * A·∂ú·∂†·∂ú

    return Œæ, Œ∑
end

@kernel function _update_tracer!(c, scheme, pseudo_velocities, grid, divUc, Œît)
    i, j, k = @index(Global, NTuple)

    ‚àáuc = divUc(i, j, k, grid, scheme, pseudo_velocities, c)
    @inbounds c[i, j, k] -= Œît * ‚àáuc
end

